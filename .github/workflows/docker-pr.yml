name: Docker PR Build

on:
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate Dockerfile
        uses: docker/build-push-action@v5
        with:
          context: .
          target: builder
          load: false
          no-cache: true

  build:
    needs: validate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet_version: ["8.0"]
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.pull_request.number }}-${{ matrix.dotnet_version }}
          build-args: |
            DOTNET_IMAGE_VERSION=${{ matrix.dotnet_version }}
          cache-from: type=gha,scope=pr-${{ github.event.pull_request.number }}-${{ matrix.dotnet_version }}
          cache-to: type=gha,mode=max,scope=pr-${{ github.event.pull_request.number }}-${{ matrix.dotnet_version }}
          provenance: true
          sbom: true
          platforms: linux/amd64,linux/arm64
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.meta.outputs.created }}

      - name: Cleanup
        if: always()
        run: |
          docker builder prune -f
          docker image prune -f 