name: Docker Build and Push

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'  # Matches semver tags like v1.0.0
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate Dockerfile
        uses: docker/build-push-action@v5
        with:
          context: .
          target: builder
          load: false
          no-cache: true

  build-and-push:
    needs: validate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet_version: ["8.0"]
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,value={{ref_name}},enable={{is_tag}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ matrix.dotnet_version }},enable={{is_default_branch}}
          flavor: |
            latest=false
            prefix=
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.version=${{ github.ref_name }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.meta.outputs.created }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            DOTNET_IMAGE_VERSION=${{ matrix.dotnet_version }}
          cache-from: type=gha,scope=${{ github.ref }}-${{ matrix.dotnet_version }}
          cache-to: type=gha,mode=max,scope=${{ github.ref }}-${{ matrix.dotnet_version }}
          provenance: true
          sbom: true
          platforms: linux/amd64,linux/arm64

      - name: Cleanup
        if: always()
        run: |
          docker builder prune -f
          docker image prune -f 